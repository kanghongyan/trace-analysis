#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('trace_jinrong_58:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}




global.io = require('socket.io').listen(server);
global.io.of('/spec').on('connection', function(client) {
    
    client.on('params', function(params){
        
        console.error(params)
        // 可用进程池
        var cp_factory = global.CP_COMPUTE_SPEC_FACTORY;
        // 取出空闲进程
        var cp_curr = cp_factory.filter(function(cp){
            return !cp.isUsing
        }) [0];
        // 不存在空闲进程，向浏览器返回信息，结束会话
        if (!cp_curr) {
            client.emit('result', { code: 2, msg: '系统繁忙，请稍后再试' });
            return;
        }
        // 标识进程为工作状态
        cp_curr.isUsing = true;
        // 向进程发送任务
        cp_curr.send(params);
        // 注册结果钩子，标识进程为空闲状态，并将数据返回至浏览器，结束会话
        cp_curr.on('message', function _m(d){
            cp_curr.removeListener('message', _m);
            cp_curr.isUsing = false;
            // 向浏览器返回信息，结束会话
            client.emit('result', d);
            console.error(d)
        });
    })
    
    client.on('heartbeat', function(data, f){
        console.error('client heartbeat', client.id)
        f('confirm: server received heartbeat')
    });
    
    client.on('disconnect', function(){
        console.error('client disconnect', client.id)
    })
    
    console.error('client connected', client.id)
});

